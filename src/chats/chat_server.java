/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chats;

import static chats.chat_client.dout;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import static sun.net.www.protocol.http.AuthCacheValue.Type.Server;

/**
 *
 * @author user
 */
public class chat_server extends javax.swing.JFrame {

    static Vector<ClientHandler> ar = new Vector<>();
    public static  String received="";
    // counter for clients
    static int i = 0;
    /**
     * Creates new form chat_server
     */
    public chat_server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chat_server().setVisible(true);
            }
        });
       
       ServerSocket ss = new ServerSocket(1234);
         
        Socket s;
         
        // running infinite loop for getting
        // client request
        while (true) 
        {
            // Accept the incoming request
            s = ss.accept();
 
            System.out.println("New client request received : " + s);
             
            // obtain input and output streams
            DataInputStream dis = new DataInputStream(s.getInputStream());
            DataOutputStream dos = new DataOutputStream(s.getOutputStream());
             
            System.out.println("Creating a new handler for this client...");
           
            // Create a new handler object for handling this request.
            String name=null;
            while(name==null){
            name=dis.readUTF();}
             System.out.println("New client  : " + name);
            ClientHandler mtch = new ClientHandler(s,name, dis, dos,received,msg_area);
 
            // Create a new Thread with this object.
            Thread t = new Thread(mtch);
             
            System.out.println("Adding this client to active client list");
 
            // add this client to active clients list
            ar.add(mtch);
 
            // start the thread.
            msg_area.setText(msg_area.getText().trim()+System.lineSeparator()+name);
            t.start();
 
            // increment i for new client.
            // i is used for naming only, and can be replaced
            // by any naming scheme
          
            i++;
            
        }
    }
 public void setString(String value){
      msg_area.setText(msg_area.getText().trim()+"  Server   "+value);
      System.out.println("abaa"+value);
} 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea msg_area;
    // End of variables declaration//GEN-END:variables
}
class ClientHandler implements Runnable 
{
    Scanner scn = new Scanner(System.in);
    private String name;
    final DataInputStream dis;
    final DataOutputStream dos;
    Socket s;
    public javax.swing.JTextArea msg_area;
    boolean isloggedin;
    String received="";
    String user="";
    // constructor
    public ClientHandler (Socket s, String name,
                            DataInputStream dis, DataOutputStream dos,String received,javax.swing.JTextArea msg_area) {
        this.dis = dis;
        this.dos = dos;
        this.name = name;
        this.s = s;
        this.isloggedin=true;
        this.received=received;
        this.msg_area=msg_area;
   }
 
    @Override
    public void run() {
 
        
        while (true) 
        {
            try
            {
                // receive the string
               // name=dis.readUTF();
                String recipient =dis.readUTF();
                String content=dis.readUTF();
                if(content.equals("logout")){
                for (ClientHandler mc :chat_server.ar) 
                {
                  if (mc.name.equals(this.name)) 
                    {
                       chat_server.ar.remove(mc);
                    }
                }
                    this.dos.writeUTF("logout");
                    this.dos.flush(); 
                    this.isloggedin=false;
                    this.s.close();
                    break;
                }
                
                if(content.equals("msg")){
                this.received = dis.readUTF();
                
                chat_server.received=this.received;
                String MsgToSend =this.received;
                chat_server server=new chat_server();
                //server.setString(this.received);
                //System.out.println("fyhejyf");
                //server.msg_area.setText("kvjb");
                //server.msg_area.setText(server.msg_area.getText().trim()+System.lineSeparator()+this.name+" : "+MsgToSend);
                //chat_server.msg_area.setText(chat_server.msg_area.getText().trim()+System.lineSeparator()+this.name+" : "+MsgToSend);
                //msg_area.append(received);
                //chat_server.msg_area.append(received);
                //Platform.runLater(() -> msg_area.append(System.lineSeparator()+this.name+" : "+MsgToSend)); 
                msg_area.setText(msg_area.getText().trim()+System.lineSeparator()+this.name+" : "+MsgToSend);
                
                 
                // break the string into message and recipient part
               // StringTokenizer st = new StringTokenizer(this.received, "#");
              //  String MsgToSend = st.nextToken();
              //  String recipient = st.nextToken();
             
                // search for the recipient in the connected devices list.
                // ar is the vector storing client of active users
                user="Login Users"+System.lineSeparator();
                for (ClientHandler mc :chat_server.ar) 
                {
                    // if the recipient is found, write on its
                    // output stream
                   user+=mc.name;
                   user+=System.lineSeparator();
                   
                    if (mc.name.equals(recipient) && mc.isloggedin==true) 
                    {
                        mc.dos.writeUTF("msg");
                        mc.dos.flush(); 
                        mc.dos.writeUTF(this.name+" : "+MsgToSend);  
                        mc.dos.flush(); 
                    }
                }
                }
              else
                {
                
                String filename=dis.readUTF();
                long sz=Long.parseLong(dis.readUTF());
                System.out.println ("File Size: "+(sz/(1024*1024))+" MB");
                byte b[]=new byte [1024];
                System.out.println("Receving file..");
                FileOutputStream fos=new FileOutputStream(new File(filename),true);
                long bytesRead;
                do
                {
                bytesRead = dis.read(b, 0, b.length);
                fos.write(b,0,b.length);
                
                }while(!(bytesRead<1024));
                System.out.println("Comleted"+filename);
                fos.close();
                File f=new File(filename);
                FileInputStream fin=new FileInputStream(f);
                
                byte bb[]=new byte [1024];
                int read;
                user="Login Users"+System.lineSeparator();
                for (ClientHandler mc :chat_server.ar) 
                {
                    // if the recipient is found, write on its
                    // output stream
                   user+=mc.name;
                   user+=System.lineSeparator();
                   
                    if (mc.name.equals(recipient) && mc.isloggedin==true) 
                    {
                        mc.dos.writeUTF("file");
                        mc.dos.flush(); 
                        mc.dos.writeUTF(filename);
                        mc.dos.flush(); 
                        mc.dos.writeUTF(this.name);
                        mc.dos.flush(); 
                        while((read = fin.read(bb)) != -1){
                            mc.dos.write(bb, 0, read); 
                            mc.dos.flush(); 
                          }
                        fin.close();
                        
                    }
                }
               
                }
                this.dos.writeUTF(user);
                this.dos.flush(); 
            } catch (IOException e) {
                 
                e.printStackTrace();
            }
             
        }
        try
        {
            // closing resources
            this.dis.close();
            this.dos.close();
             
        }catch(IOException e){
            e.printStackTrace();
        }
    }
}
